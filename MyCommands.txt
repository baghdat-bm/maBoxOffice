# Make sure the script renew.sh is executable.
chmod +x certbot/renew.sh

### local dev
python manage.py runserver 127.0.0.1:8000 --settings=webapp.dev-loc-settings
python manage.py makemigrations --settings=webapp.dev-loc-settings
python manage.py migrate --settings=webapp.dev-loc-settings
python manage.py startapp appName --settings=webapp.dev-loc-settings
python -Xutf8 manage.py dumpdata --indent=2 --exclude auth.permission --exclude contenttypes -o db.json --settings=webapp.dev-loc-settings
python manage.py loaddata db.json --settings=webapp.dev-loc-settings
python manage.py createsuperuser --settings=webapp.dev-loc-settings
python manage.py collectstatic --no-input --clear --settings=webapp.dev-loc-settings


### Run the development environment.
docker compose -f docker-compose.dev.yml up --build
docker compose -f docker-compose.dev.yml exec webapp python manage.py makemigrations
docker compose -f docker-compose.dev.yml exec webapp python manage.py migrate --noinput
docker compose -f docker-compose.dev.yml exec webapp python manage.py createsuperuser
docker compose -f docker-compose.dev.yml exec webapp python manage.py collectstatic --no-input --clear
docker exec -it maboxoffice-webapp-1 /bin/bash
# apt-get update
# apt-get install gettext
# ONLY ONE TIME: django-admin makemessages -l ru
docker compose -f docker-compose.dev.yml exec webapp django-admin makemessages --all --ignore=env
docker compose -f docker-compose.dev.yml exec webapp django-admin compilemessages
docker compose -f docker-compose.dev.yml exec webapp python manage.py createsuperuser
docker compose -f docker-compose.dev.yml exec webapp python manage.py loaddata db.json
docker compose -f docker-compose.dev.yml logs -f


### Run Development mode on https
docker compose -f docker-compose.stage.yml up --build -d
docker compose -f docker-compose.stage.yml down --remove-orphans
docker compose -f docker-compose.stage.yml logs -f
docker compose -f docker-compose.stage.yml exec webapp python manage.py migrate
docker compose -f docker-compose.stage.yml exec webapp python manage.py createsuperuser
docker compose -f docker-compose.stage.yml exec webapp python manage.py collectstatic --no-input --clear
docker compose -f docker-compose.stage.yml exec webapp python -Xutf8 manage.py dumpdata --indent=2 --exclude auth.permission --exclude contenttypes -o db.json
docker compose -f docker-compose.stage.yml exec webapp python manage.py loaddata db.json
docker exec -it maboxoffice-webapp-1 /bin/bash
docker exec -it maboxoffice-nginx-1 /bin/bash

### For production
# first set up the certificates.
docker compose -f docker-compose.prod.yml run --rm certbot certonly --webroot --webroot-path=/etc/letsencrypt --email baghdat.bm@gmail.com --agree-tos --no-eff-email -d bakeminmen.com
docker compose -f docker-compose.prod.yml logs -f
# Then, start the production environment.
docker compose -f docker-compose.prod.yml up --build


### PGRE backup data
docker exec -it maboxoffice-db-1 /bin/bash
pg_dump -U your_username -h localhost -d your_database_name > backup.sql
-U — имя пользователя PostgreSQL.
-h — адрес сервера (например, localhost или IP-адрес).
-d — имя базы данных.
backup.sql — файл, в который будет сохранён бэкап.

pg_dump -U MaDbUser -h localhost -d madb > backup.sql


### PGRE restore data
psql -U MaDbUser -h db -d madb < backup.sql


### container
apt-get update && apt-get install redis-tools

### git
git reset --hard


Successfully installed django-report-builder-6.4.2 et-xmlfile-1.1.0 openpyxl-3.0.10
